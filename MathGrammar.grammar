<start> 			= <bitor_expr>
<bitor_expr> 		= <bitxor_expr>, { [ "|", <bitxor_expr> ] }
<bitxor_expr> 		= <bitand_expr>, { [ "^", <bitand_expr> ] }
<bitand_expr> 		= <shiftleft_expr>, { [ "&", <shiftleft_expr> ] }
<shiftleft_expr> 	= <shiftright_expr>, { [ "<<", <shiftright_expr> ]}
<shiftright_expr>	= <sub_expr>, { [ ">>", <sub_expr> ] }
<sub_expr>			= <add_expr>, { [ "-", <add_expr> ] }
<add_expr>			= <div_expr>, { [ "+", <div_expr> ] }
<div_expr>			= <mul_expr>, { [ "/", <mul_expr> ] }
<mul_expr>			= <mod_expr>, { [ "*", <mod_expr> ] }
<mod_expr>			= <unary_expr>, { [ "%", <unary_expr> ] }
<unary_expr>		= <factorial_expr>
					| "-", <unary_expr>
					| "~", <unary_expr>
<factorial_expr>	= <power_expr> { [ "!" ] }

//right associative power_expr rule:
<power_expr>		= <expression>, [ "**", <power_expr> ]

//left associative power_expr rule:
<power_expr>		= <expression>, { [ "**", <expression> ] }


<expression>		= <number> 
					| <variable>
					| "(", <start>, ")" 
					| <id>, "(", [ <start>, [",", <start>] ], ")"

<id>				= a valid identifier (ie: [a-zA-Z][a-zA-Z0-9]*)
<number>			= a valid number (anything parseable by NSNumberFormatter)
<variable>			= "$", <id>

One important thing to understand:
All but one of the binary operators (|, ^, &, <<, >>, -, +, /, *, and %) are left associative.  In other words, if you have the string "1 - 2 - 3", it should be parsed as "(1 - 2) - 3" (= -4).  A right associative parsing would result in "1 - (2 - 3)" (= 2).  The exception to this is the power operator "**".  The grammar above defines it as right associative, because 2 ** 3 ** 2 should be parsed as "2 ** (3 ** 2)" (= 512) and not "(2 ** 3) ** 2" (= 64).  DDMathParser, however, allows you to specify the associativities of these operators, should you so desire.